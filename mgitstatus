#!/bin/sh

# MIT license

C_RED="\033[1;31m"
C_YELLOW="\033[1;33m"
C_CYAN="\033[1;36m"
C_WHITE="\033[1;37m"
C_GREEN="\033[1;32m"
C_RESET="$(tput sgr0)"

if [ "$1" = "--help" -o -z "$1" ]; then
    echo "Usage: $0 <DIR> [DEPTH=2]" >&2
    echo
    echo "Scan for .git dirs under DIR (up to DEPTH dirs deep) and show git status"
    exit 1
fi

if [ -z "$2" ]; then
    DEPTH=2
else
    DEPTH=$2
fi

# Find all .git dirs, up to DEPTH levels deep
for GIT_DIR in $(find $1 -maxdepth $DEPTH -name ".git" -type d); do
    PROJ_DIR=$(dirname $GIT_DIR)

    printf "${PROJ_DIR}: "

    # Find all remote branches that have been checked out and figure out if
    # they need a push.
    NEEDS_PUSH_BRANCHES=""
    for REF_HEAD in $(ls $GIT_DIR/refs/heads); do
        REV_LOCAL=$(git --git-dir $GIT_DIR rev-parse --verify $REF_HEAD 2>/dev/null)
        REV_REMOTE=$(git --git-dir $GIT_DIR rev-parse --verify origin/$REF_HEAD 2>/dev/null)

        if [ "$REV_LOCAL" != "$REV_REMOTE" ]; then
            NEEDS_PUSH_BRANCHES="${NEEDS_PUSH_BRANCHES},$REF_HEAD"
        fi
    done
    if [ \! -z "$NEEDS_PUSH_BRANCHES" ]; then
        NEEDS_PUSH_BRANCHES=$(echo "$NEEDS_PUSH_BRANCHES" | awk '{print substr($0, 2, length($0) - 1)}')
    fi

    # Find out if there are uncomitted changes
    UNCOMMITTED=$(git --work-tree $(dirname $GIT_DIR) --git-dir $GIT_DIR diff-index --quiet HEAD --; echo $?)

    # Find out if there are untracked changes
    UNTRACKED=$(git --work-tree $(dirname $GIT_DIR) --git-dir $GIT_DIR ls-files --exclude-standard --others)

    # Build up the status string
    STATUS_NEEDS=""
    if [ \! -z "$NEEDS_PUSH_BRANCHES" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_YELLOW}Needs push ($NEEDS_PUSH_BRANCHES)${C_RESET} "
    fi
    if [ "$UNCOMMITTED" -ne 0 ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_RED}Uncommitted changes${C_RESET} "
    fi
    if [ "$UNTRACKED" != "" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_CYAN}Untracked files${C_RESET} "
    fi
    if [ "$STATUS_NEEDS" = "" ]; then
        STATUS_NEEDS="${STATUS_NEEDS}${C_GREEN}ok${C_RESET} "
    fi

    # Print the output
    printf "$STATUS_NEEDS\n"
done
